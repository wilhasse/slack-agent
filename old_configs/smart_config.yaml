# Smart Slack Monitor Configuration
# This is an example - copy to smart_config.yaml and customize

# Channels to monitor (supports wildcards)
channels:
  - "cslog-alertas*"    # All channels starting with cslog-alertas

# Keywords to search for (if not monitoring specific channels)
# Copied from your config.py
keywords:
  # Portuguese - Urgência
  - "urgente"
  - "crítico"
  - "critico"
  - "emergência"
  - "emergencia"
  - "ajuda"
  - "socorro"
  - "imediato"
  - "prioridade"
  - "asap"

  # Portuguese - Problemas
  - "erro"
  - "falha"
  - "falhou"
  - "quebrado"
  - "quebrou"
  - "parado"
  - "caiu"
  - "fora do ar"
  - "indisponível"
  - "indisponivel"
  - "bloqueado"
  - "travado"

  # Portuguese - Alertas
  - "alerta"
  - "atenção"
  - "atencao"
  - "cuidado"
  - "aviso"
  - "problema"
  - "incidente"
  - "bug"

  # Portuguese - Produção
  - "produção"
  - "producao"
  - "deploy"
  - "deployment"
  - "build"
  - "cliente"
  - "usuário"
  - "usuario"

  # Portuguese - Segurança
  - "segurança"
  - "seguranca"
  - "vulnerabilidade"
  - "ataque"
  - "breach"
  - "invasão"
  - "invasao"

  # English
  - "urgent"
  - "critical"
  - "emergency"
  - "help"
  - "alert"
  - "incident"
  - "down"
  - "error"
  - "failed"
  - "blocked"
  - "immediate"
  - "production"
  - "outage"

# How often to check for new messages (seconds)
check_interval: 60  # 1 minute

# Where to send filtered alerts (set to null to disable)
# This is the channel that will ONLY receive truly important alerts
summary_channel: "cslog-alertas-resumo"

# Smart filtering settings
filtering:
  # Minimum urgency level to send (CRITICAL, IMPORTANT, NORMAL, IGNORE)
  # Set to CRITICAL to only send the most urgent alerts
  # Set to IMPORTANT to send both CRITICAL and IMPORTANT
  min_urgency_level: "IMPORTANT"

  # Don't resend similar alerts within this time window (hours)
  # This prevents duplicate alerts from flooding the channel
  duplicate_window_hours: 24

  # How many times must an issue occur before alerting
  # Set to 1 to alert on first occurrence
  # Set to 3 to only alert on recurrent issues
  recurrence_threshold: 3

  # Ask Claude for final decision on borderline cases
  # This adds an extra layer of intelligence
  use_claude_decision: true

# Database path for alert history
database: "smart_alerts.db"

# Advanced features
advanced:
  # Enable desktop notifications (requires notify-send on Linux)
  notifications: false

  # Send startup notification to summary channel
  send_startup_notification: true

  # Enable detailed logging
  verbose: true

  # Export statistics periodically
  export_stats: true
  stats_interval_hours: 24

# Custom importance rules (optional)
# These guide Claude in understanding what's important for YOUR team
# Copied from your config.py
importance_rules: |
  Regras adicionais para determinar a importância das mensagens:

  1. Mensagens de usuários específicos (gerentes, líderes, etc.)
  2. Mensagens em threads onde você foi mencionado
  3. Mensagens com @ mencionando seu nome ou equipe
  4. Mensagens sobre sistemas pelos quais você é responsável
  5. Falhas de build/deployment
  6. Problemas reportados por clientes
  7. Alertas de segurança
  8. Mensagens sobre produção em horário fora do expediente
  9. Notificações de monitoramento (downtime, alta latência, etc.)
  10. Requests de aprovação urgente

# Example scenarios:
#
# Scenario 1: Production-focused monitoring
# - Set min_urgency_level to CRITICAL
# - Set recurrence_threshold to 1 (alert immediately)
# - Monitor only prod-* channels
#
# Scenario 2: Development team alerts
# - Set min_urgency_level to IMPORTANT
# - Set recurrence_threshold to 3 (reduce noise)
# - Monitor all dev channels
#
# Scenario 3: Minimal noise
# - Set min_urgency_level to CRITICAL
# - Set duplicate_window_hours to 72
# - Set recurrence_threshold to 5
